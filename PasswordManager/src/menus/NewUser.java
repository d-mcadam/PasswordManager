/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package menus;

import data.Storage;
import data.User;
import java.util.Arrays;
import javax.swing.UIManager;
import utilities.ImageUtilities;
import utilities.PasswordUtilities;

/**
 *
 * @author DYLAN MCADAM
 */
public class NewUser extends javax.swing.JDialog {

    private Storage storage;
    
    /**
     * Creates new form NewUser
     */
    public NewUser(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.textfieldPasswordBox.setEchoChar('\u25cf');
        this.textfieldConfirmPasswordBox.setEchoChar('\u25cf');
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitle = new javax.swing.JLabel();
        labelUsernameBox = new javax.swing.JLabel();
        labelPasswordBox = new javax.swing.JLabel();
        labelConfirmPasswordBox = new javax.swing.JLabel();
        textfieldUsernameBox = new javax.swing.JTextField();
        textfieldPasswordBox = new javax.swing.JPasswordField();
        textfieldConfirmPasswordBox = new javax.swing.JPasswordField();
        buttonCreateNewUser = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        labelUsernameIcon = new javax.swing.JLabel();
        labelPasswordIcon = new javax.swing.JLabel();
        checkboxShowPasswords = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTitle.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("Create New User");

        labelUsernameBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelUsernameBox.setText("Username:");

        labelPasswordBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelPasswordBox.setText("Password:");

        labelConfirmPasswordBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelConfirmPasswordBox.setText("Confirm Password:");

        textfieldUsernameBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textfieldUsernameBoxFocusGained(evt);
            }
        });
        textfieldUsernameBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textfieldUsernameBoxKeyReleased(evt);
            }
        });

        textfieldPasswordBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textfieldPasswordBoxFocusGained(evt);
            }
        });
        textfieldPasswordBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textfieldPasswordBoxKeyReleased(evt);
            }
        });

        textfieldConfirmPasswordBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textfieldConfirmPasswordBoxFocusGained(evt);
            }
        });
        textfieldConfirmPasswordBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textfieldConfirmPasswordBoxKeyReleased(evt);
            }
        });

        buttonCreateNewUser.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buttonCreateNewUser.setText("Create");
        buttonCreateNewUser.setEnabled(false);
        buttonCreateNewUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCreateNewUserActionPerformed(evt);
            }
        });

        buttonCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        labelUsernameIcon.setToolTipText("Username already exists.");

        labelPasswordIcon.setToolTipText("Passwords do not match.");

        checkboxShowPasswords.setText("Show passwords");
        checkboxShowPasswords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxShowPasswordsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelPasswordBox)
                            .addComponent(labelUsernameBox)
                            .addComponent(labelConfirmPasswordBox))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkboxShowPasswords)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(textfieldPasswordBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(textfieldUsernameBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(textfieldConfirmPasswordBox, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelUsernameIcon)
                                    .addComponent(labelPasswordIcon))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonCreateNewUser, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                                .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(labelTitle)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelUsernameIcon)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelUsernameBox)
                        .addComponent(textfieldUsernameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPasswordBox)
                    .addComponent(textfieldPasswordBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelConfirmPasswordBox)
                            .addComponent(textfieldConfirmPasswordBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkboxShowPasswords)
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonCreateNewUser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(labelPasswordIcon))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonCreateNewUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCreateNewUserActionPerformed
        createNewUser();
    }//GEN-LAST:event_buttonCreateNewUserActionPerformed

    private void textfieldUsernameBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textfieldUsernameBoxFocusGained
        this.textfieldUsernameBox.selectAll();
    }//GEN-LAST:event_textfieldUsernameBoxFocusGained

    private void textfieldPasswordBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textfieldPasswordBoxFocusGained
        this.textfieldPasswordBox.selectAll();
    }//GEN-LAST:event_textfieldPasswordBoxFocusGained

    private void textfieldConfirmPasswordBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textfieldConfirmPasswordBoxFocusGained
        this.textfieldConfirmPasswordBox.selectAll();
    }//GEN-LAST:event_textfieldConfirmPasswordBoxFocusGained

    private void textfieldUsernameBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldUsernameBoxKeyReleased
        checkSaveEligibility();
    }//GEN-LAST:event_textfieldUsernameBoxKeyReleased

    private void textfieldPasswordBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldPasswordBoxKeyReleased
        checkSaveEligibility();
    }//GEN-LAST:event_textfieldPasswordBoxKeyReleased

    private void textfieldConfirmPasswordBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldConfirmPasswordBoxKeyReleased
        checkSaveEligibility();
    }//GEN-LAST:event_textfieldConfirmPasswordBoxKeyReleased

    private void checkboxShowPasswordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxShowPasswordsActionPerformed
        boolean showPasswords = this.checkboxShowPasswords.isSelected();
        this.textfieldPasswordBox.setEchoChar(showPasswords ? '\u0000' : '\u25cf');
        this.textfieldConfirmPasswordBox.setEchoChar(showPasswords ? '\u0000' : '\u25cf');
    }//GEN-LAST:event_checkboxShowPasswordsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NewUser dialog = new NewUser(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonCreateNewUser;
    private javax.swing.JCheckBox checkboxShowPasswords;
    private javax.swing.JLabel labelConfirmPasswordBox;
    private javax.swing.JLabel labelPasswordBox;
    private javax.swing.JLabel labelPasswordIcon;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelUsernameBox;
    private javax.swing.JLabel labelUsernameIcon;
    private javax.swing.JPasswordField textfieldConfirmPasswordBox;
    private javax.swing.JPasswordField textfieldPasswordBox;
    private javax.swing.JTextField textfieldUsernameBox;
    // End of variables declaration//GEN-END:variables

    public void setReferences(Storage storage){
        this.storage = storage;
    }
    
    private void checkSaveEligibility(){
        String enteredUsername = this.textfieldUsernameBox.getText().trim();
        char[] enteredPassword = this.textfieldPasswordBox.getPassword();
        char[] confirmPassword = this.textfieldConfirmPasswordBox.getPassword();
        
        boolean textInFields = !enteredUsername.equals("") && enteredPassword.length > 0 && confirmPassword.length > 0;
        boolean usernameIsUnique = !storage.getUsers().stream().anyMatch(user -> user.getUsername().equals(enteredUsername));
        boolean passwordsMatch = Arrays.equals(enteredPassword, confirmPassword);
        
        this.buttonCreateNewUser.setEnabled(textInFields && usernameIsUnique && passwordsMatch);
        this.buttonCreateNewUser.setToolTipText(
                !textInFields ? "All fields require values." : 
                !usernameIsUnique ? "Username already exists." : 
                !passwordsMatch ? "Passwords do not match." : "Create the new user");
        
        this.labelUsernameIcon.setIcon(!usernameIsUnique ? ImageUtilities.getFinalIcon(UIManager.getIcon("OptionPane.warningIcon"), 27, 27) : null);
        this.labelPasswordIcon.setIcon(!passwordsMatch ? ImageUtilities.getFinalIcon(UIManager.getIcon("OptionPane.errorIcon"), 27, 27) : null);
    }

    private void createNewUser() {
        String username = this.textfieldUsernameBox.getText().trim();
        char[] inputPassword = this.textfieldPasswordBox.getPassword();
        byte[] salt = PasswordUtilities.generateSalt();
        
        String securePassword = PasswordUtilities.generateSecurePassword(Arrays.toString(inputPassword), salt);
        
        User user = new User(username, securePassword, salt);
        this.storage.addUser(user);
        this.dispose();
    }
    
}
